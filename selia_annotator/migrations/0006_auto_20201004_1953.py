# Generated by Django 3.1.1 on 2020-10-05 00:53
from functools import lru_cache

from django.db import migrations, models
import django.db.models.deletion
import selia_annotator.models.annotator_module


def move_annotation_tool_components_to_modules(apps, schema_editor):
    """
    Move AnnotationToolComponents entries into the AnnotatorModule tables.

    This migration does two things:

    1) Break the AnnotationTool table, with their name and versions, into two tables:
    the AnnotatorTool table (mainly for name, and info on the tool), and the
    AnnotatorVersion table (to save each version of the same AnnotatorTool). For this
    it selects a representative AnnotatorTool from among those having the same name
    (although different versions). For each AnnotatorTool entry it will create a
    AnnotatorVersion with the same version and pointing to his representative. Hence,
    by the end of this process some AnnotationTools will not have any registered
    AnnotatorVersions (those that are not representatives).

    2) Add the registered javascript modules from the AnnotationToolComponent table
    into the AnnotationModule table.
    """
    AnnotatorVersion = apps.get_model('selia_annotator', 'AnnotatorVersion')
    AnnotatorModule = apps.get_model('selia_annotator', 'AnnotatorModule')
    AnnotationTool = apps.get_model('selia_annotator', 'AnnotationTool')
    AnnotationToolComponent = apps.get_model('selia_annotator', 'AnnotationToolComponent')

    @lru_cache
    def get_tool_from_name(name):
        # This function will get a fixed annotation tool with a given name,
        # disregarding the version.
        return (
            AnnotationTool.objects
            .filter(name=name)
            .order_by('version')
            .first()
        )

    @lru_cache
    def get_version_from_tool(annotation_tool):
        tool = get_tool_from_name(annotation_tool.name)

        version, _ = AnnotatorVersion.objects.get_or_create(
            annotation_tool=tool,
            version=annotation_tool.version)
        return version

    for tool in AnnotationTool.objects.all():
        version = get_version_from_tool(tool)

    # Check that all tools where correctly copied into the Version table.
    versions = AnnotatorVersion.objects.count()
    assert AnnotationTool.objects.count() == versions

    # Check that the number of AnnotationTool references in the
    # annotation tool column of AnnotatorVersion is the same as the
    # number of diferent AnnotationTools (disregarding the version).
    annotation_tools = AnnotationTool.objects.values('name').distinct().count()
    references = AnnotatorVersion.objects.values('annotation_tool').distinct().count()
    assert annotation_tools == references

    # Add javascript modules
    for tool_component in AnnotationToolComponent.objects.all():
        version = get_version_from_tool(tool_component.annotation_tool)

        module = AnnotatorModule(
            javascript_file=tool_component.javascript_file,
            is_active=tool_component.is_active)

        module.__dict__.update(version.__dict__)
        module.save()

    # Check that the number of components is the same as the number of
    # modules
    assert AnnotationToolComponent.objects.count() == AnnotatorModule.objects.count()


class Migration(migrations.Migration):

    dependencies = [
        ('selia_annotator', '0005_auto_20200925_1935'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnnotatorVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation', verbose_name='created on')),
                ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                ('version', models.CharField(db_column='version', help_text='Annotator version', max_length=16, verbose_name='version')),
            ],
            options={
                'verbose_name': 'Annotator Version',
                'verbose_name_plural': 'Annotator Versions',
            },
        ),
        migrations.AlterUniqueTogether(
            name='annotationtool',
            unique_together=set(),
        ),
        migrations.CreateModel(
            name='AnnotatorModule',
            fields=[
                ('annotatorversion_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='selia_annotator.annotatorversion')),
                ('javascript_file', models.FileField(db_column='javascript_file', help_text='Javascript file containing annotator module', upload_to=selia_annotator.models.annotator_module.annotator_path, verbose_name='javascript file')),
                ('is_active', models.BooleanField(db_column='is_active', default=True, help_text='Is this module to be used as default annotator for the associated annotation type?', verbose_name='is active')),
            ],
            options={
                'verbose_name': 'Annotator Module',
                'verbose_name_plural': 'Annotator Module',
            },
            bases=('selia_annotator.annotatorversion',),
        ),
        migrations.AddField(
            model_name='annotatorversion',
            name='annotation_tool',
            field=models.ForeignKey(db_column='annotation_tool_id', help_text='Annotation tool', on_delete=django.db.models.deletion.CASCADE, to='selia_annotator.annotationtool', verbose_name='annotation tool'),
        ),
        migrations.RunPython(
            code=move_annotation_tool_components_to_modules,
            atomic=True,
        ),
        migrations.DeleteModel(
            name='AnnotationToolComponent',
        ),
    ]
